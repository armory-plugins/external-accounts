import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id("io.spinnaker.plugin.bundler").version("$spinnakerGradleVersion")
    id "com.palantir.docker" version "0.25.0"
}

apply plugin: "io.spinnaker.plugin.bundler"

version = normalizedVersion()

spinnakerBundle {
    pluginId = "Armory.EAP"
    description = "Dynamically load accounts from different sources"
    provider = "https://armory.io"
    version = rootProject.version
}

subprojects { project ->
    group = "io.armory.plugin.eap"
    version = rootProject.version
    apply plugin: "maven-publish"

    repositories {
        mavenCentral()
        maven {
            url 'https://armory.jfrog.io/artifactory/gradle-dev'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

task version() {
    println(version)
}

docker {
    dockerfile project.file("build-tools/Dockerfile")
    def registry = System.getenv('REGISTRY') ?: "docker.io"
    def registryOrg = System.getenv('REGISTRY_ORG') ?: "armory"
    name "$registry/$registryOrg/eap-plugin:$version"
    files project.file("build/distributions"),
            project.file("build-tools/install.sh"),
            project.file("git-poller/src/main/bash/git-poller.sh")
    buildArgs([PLUGIN_ID: "eap-$version"])
    copySpec.from("build/distributions").into("distributions")
}

String normalizedVersion() {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            executable = "$projectDir/build-tools/version.sh"
            standardOutput = os
        }
        ext.version = os.toString().trim()
    }
}

task generatePluginsJson {
    doLast {
        def pluginInfoFile = new File("$buildDir/distributions/plugin-info.json")
        def pluginInfo = new JsonSlurper().parse(pluginInfoFile)

        pluginInfo.releases[0].url = "file:///opt/spinnaker/lib/local-plugins/eap/${version}/eap-${version}.zip"
        def plugins = [pluginInfo]
        File dockerPlugins = new File("$buildDir/distributions/plugins-docker.json")
        dockerPlugins.write(JsonOutput.prettyPrint(JsonOutput.toJson(plugins)))

        pluginInfo.releases[0].url = "https://github.com/armory-plugins/external-accounts/releases/download/v${version}/eap-${version}.zip"
        File remotePlugins = new File("$buildDir/distributions/plugins-remote.json")
        remotePlugins.write(JsonOutput.prettyPrint(JsonOutput.toJson(plugins)))

        pluginInfo.releases[0].url = "file://$buildDir/distributions/eap-${version}.zip"
        File localPlugins = new File("$buildDir/distributions/plugins.json")
        localPlugins.write(JsonOutput.prettyPrint(JsonOutput.toJson(plugins)))
    }
}

releaseBundle.finalizedBy generatePluginsJson
